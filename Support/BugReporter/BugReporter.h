/*!    @header        BugReporter    @discussion       BugReporter by Zonic.              The BugReporter library allows applications to automatically invoke a       custom "CrashReporter"-style utility if they encounter a problem which       causes the application to unexpectedly quit.              Rather than submitting crash reports to Apple, BugReporter allows these       reports to be sent directly to the original developer for analysis.              The BugReporter API is exposed through a simple "C" interface, providing       maximum compatibility with development environments. It is distributed as       a single static library, requires no additional resources or frameworks,       and can be used from CFM or Mach-O applications packaged in either       single-file or bundled form.    @copyright        Copyright 2005-2006 Zonic*//*    COPYRIGHT:        Copyright © 2005-2006, Zonic Ltd        <http://www.zonic.co.uk/>        If you have received this software as part of a source code distribution        from Zonic Ltd, subject to the limits of a supporting contractual        agreement, permission to use, copy, modify, distribute, and sell this        software for any purpose is hereby granted.                Zonic retains full rights to this software.    ___________________________________________________________________________*/#ifndef BUGREPORTER_HDR#define BUGREPORTER_HDR//=============================================================================//      Include files//-----------------------------------------------------------------------------#ifndef TARGET_API_MAC_CARBON#define TARGET_API_MAC_CARBON											1#endif#include <TargetConditionals.h>#if TARGET_RT_MAC_CFM    #include <Carbon.h>#else    #include <Carbon/Carbon.h>#endif//=============================================================================//      Constants//-----------------------------------------------------------------------------/*!    @enum        BRStatus    @discussion        Status values for the result of a call to the BugReporter API.    @constant kBRNoErr        No error.    @constant kBRUnavailable        BugReporter is not available on this platform.    @constant kBRPermissionError        BugReporter encountered a permissions problem.    @constant kBRPropertyListInvalid        The property list is invalid.    @constant kBRPropertyListMissingKey        The property list is missing a required key.    @constant kBROutOfMemory        The library was unable to allocate memory.*/typedef enum {    kBRNoErr                        = 0,    kBRUnavailable                  = 10,    kBRPermissionError              = 20,    kBRPropertyListInvalid          = 30,    kBRPropertyListMissingKey       = 40,    kBROutOfMemory                  = 50,    kBRSize32                       = 0xFFFFFFFF} BRStatus;//=============================================================================//      Types//-----------------------------------------------------------------------------typedef void (*BRCallbackFunc)(void);//=============================================================================//      Functions//-----------------------------------------------------------------------------#ifdef __cplusplusextern "C" {#endif/*!    @function        IsBugReporterAvailable    @discussion        Checks to see if the BugReporter can be used on this system.    @result        Returns kBRNoErr or kBRUnavailable to indicate if the BugReporter system        is available or not. If kBRUnavailable is returned, no further calls        should be made to the BugReporter API.*/extern BRStatusIsBugReporterAvailable(void);/*!    @function        EnableBugReporter    @discussion        Enables the BugReporter system.                After enabling the BugReporter system, the application's crash logs        will be captured and displayed by BugReporter.                It is an error to call EnableBugReporter twice, without an intervening        call to DisableBugReporter.    @param cfPropertyList        XML property list containing configuration information for BugReporter.    @result        Success or failure of the operation.*/extern BRStatusEnableBugReporter(CFStringRef cfPropertyList);/*!    @function        DisableBugReporter    @discussion        Disables the BugReporter system.                After disabling the BugReporter system, the application's crash logs        will be captured and displayed by the standard Apple mechanism.                It is an error to call DisableBugReporter without a previous, matching,        call to EnableBugReporter.*/extern voidDisableBugReporter(void);/*!    @function        SetBugReporterCrashCallback    @discussion        Tells BugReporter to call this function when it detects a crash.                 Using this function is not recommended, as running code after a crash is        not guaranteed to work. At best, the application may just crash again        (in which case BugReporter will not call the callback a second time),        and at worst it will corrupt the user's data.                 An example callback function would be:                void MyCrashCallback(void)        {            // Your code here        }*/extern voidSetBugReporterCrashCallback(BRCallbackFunc callback);#ifdef __cplusplus}#endif#endif // BUGREPORTER_HDR